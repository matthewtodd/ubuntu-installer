.TH REPREPRO 1 "2009-03-02" "reprepro" REPREPRO
.SH NAME
reprepro \- produce, manage and sync a local repository of Debian packages
.SH SYNOPSIS
.B reprepro \-\-help

.B reprepro
[
\fIoptions\fP
]
\fIcommand\fP
[
\fIper\-command\-arguments\fP
]
.SH DESCRIPTION
reprepro is a tool to manage a repository of Debian packages
(.deb, .udeb, .dsc, ...).
It stores files either being injected manually or
downloaded from some other repository (partially) mirrored
into a pool/ hierarchy.
Managed packages and checksums of files are stored in a libdb4.3
database (or libdb4.4 or libdb3, depending what reprepro was compiled with),
so no database server is needed.
Checking signatures of mirrored repositories and creating
signatures of the generated Package indices is supported.

.B WARNING: Some functions are still quite experimental and not very heavily tested. Be careful.

Former working title of this program was mirrorer.
.SH "GLOBAL OPTIONS"
Options can be specified before the command. Each affects a different
subset of commands and is ignored by other commands.
.TP
.B \-h \-\-help
Displays a short list of options and commands with description.
.TP
.B \-v, \-V, \-\-verbose
Be more verbose. Can be applied multiple times. One uppercase
.B \-V
counts as five lowercase
.B \-v.
.TP
.B \-\-silent
Be less verbose. Can be applied multiple times. One
.B \-v
and one
.B \-s
cancel each other out.
.TP
.B \-f, \-\-force
This option is ignored, as it no longer exists.
.TP
.B \-b, \-\-basedir \fIbasedir\fP
Sets the base\-dir all other default directories are relative to.
If none is supplied and the
.B REPREPRO_BASE_DIR
environment variable is not set either, the current directory
will be used.
.TP
.B \-\-outdir \fIoutdir\fP
Sets the base\-dir of the repository to manage, i.e. where the
.B pool/
subdirectory resides. And in which the
.B dists/
directory is placed by default.
The default for this is \fIbasedir\fP.
.TP
.B \-\-confdir \fIconfdir\fP
Sets the directory where the configuration is searched in.

If none is given, \fIbasedir\fP\fB/conf\fP will be used.
.TP
.B \-\-distdir \fIdistdir\fP
Sets the directory to generate index files relatively to. (i.e. things like
Packages.gz, Sources.gz and Release.gpg)

If none is given, \fIoutdir\fP\fB/dists\fP is used.

.B Note:
apt has
.B dists
hard-coded in it, so this is mostly only useful for testing or when your webserver
pretends another directory structure than your physical layout.

.B Warning:
Beware when changing this forth and back between two values not ending
in the same directory.
Reprepro only looks if files it wants are there. If nothing of the content
changed and there is a file it will not touch it, assuming it is the one it
wrote last time, assuming any different \fB\-\-distdir\fP ended in the same
directory.
So either clean a directory before setting \fB\-\-distdir\fP to it or
do an \fBexport\fP with the new one first to have a consistent state.
.TP
.B \-\-logdir \fIlogdir\fP
The directory where files generated by the \fBLog:\fP directive are
stored if they have no absolute path.

If none is given, \fIbasedir\fP\fB/logs\fP is used.
.TP
.B \-\-dbdir \fIdbdir\fP
Sets the directory where reprepro keeps its databases.

If none is given, \fIbasedir\fP\fB/db\fP is used.

.B Note:
This is permanent data, no cache. One has almost to regenerate the whole
repository when this is lost.
.TP
.B \-\-listdir \fIlistdir\fP
Sets the directory where downloads it downloads indices to when importing
from other repositories. This is temporary data and can be safely deleted
when not in an update run.

If none is given, \fIbasedir\fP\fB/lists\fP is used.
.TP
.B \-\-overridedir \fIoverridedir\fP \fR(OBSOLETE)\fP
Sets the directory where specified override\-files will be searched in if
they do not start with a slash.
If none is given, \fIbasedir\fP\fB/override\fP is used.
.br
This will be removed in a future version.
Since reprepro 3.0.0, also the directory given to \-\-confdir is searched
for override files.
.TP
.B \-\-methoddir \fImethoddir\fP
Look in \fImethoddir\fP instead of
.B /usr/lib/apt/methods
for methods to call when importing from other repositories.
.TP
.B \-C, \-\-component \fIcomponent\fP
Limit the specified command to this component only.
This will force added packages to this component,
limit removing packages from this component,
only list packages in this component,
and/or otherwise only look at packages in this component,
depending on the command in question.
.TP
.B \-A, \-\-architecture \fIarchitecture\fP
Limit the specified command to this architecture only.
(i.e. only list such packages,
only remove packages from the specified architecture,
or otherwise only look at/act on this architecture
depending on the specific command).

Note that architecture \fBall\fP packages can be included to each
architecture but are then handled separately.
Thus using \fB\-A\fP correctly allows to have different versions of
an architecture \fBall\fP package in different architectures of the
same distribution.
.TP
.B \-T, \-\-type \fRdsc|deb|udeb
Limit the specified command to this packagetype only.
(i.e. only list such packages, only remove such packages, only include
such packages, ...)
.TP
.B \-S, \-\-section \fIsection\fP
Overrides the section of inclusions. (Also override possible override files)
.TP
.B \-P, \-\-priority \fIpriority\fP
Overrides the priority of inclusions. (Also override possible override files)
.TP
.BR \-\-export= ( never | changed | lookedat | force )
This option specify whether and how the high level actions
(e.g. install, update, pull, delete)
should export the index files of the distributions they work with.
.TP
.BR \-\-export=normal " (default till 3.0.0)"
.BR \-\-export=lookedat " (alternative new name since 3.0.1)"
In this mode every distribution the action handled will be exported,
unless there was an error possibly corrupting it.
.br
\fINote\fP that only missing files and files whose intended content changed
between before and after the action will be written.
To get a guaranteed current export, use the \fBexport\fP action.
.TP
.BR \-\-export=changed " (default since 3.0.1)"
In this mode every distribution actually changed will be exported,
unless there was an error possibly corrupting it.
(i.e. if nothing changed, not even missing files will be created.)
.br
\fINote\fP that only missing files and files whose intended content changed
between before and after the action will be written.
To get a guaranteed current export, use the \fBexport\fP action.
.TP
.BR \-\-export=force
Always export all distributions looked at, even if there was some
error possibly bringing it into a inconsistent state.
.TP
.BR \-\-export=never
No index files are exported. You will have to call \fBexport\fP later.
.br
\fINote\fP that you most likely additionally need the \fB\-\-keepunreferenced\fP
option, if you do want some of the files pointed to by the untouched index
files to vanish.
.TP
.B \-\-ignore=\fIwhat\fP
Ignore errors of type \fIwhat\fP. See the section \fBERROR IGNORING\fP
for possible values.
.TP
.B \-\-nolistsdownload
When running \fBupdate\fP, \fBcheckupdate\fP or \fBpredelete\fP do not download
any Release or index files.
This is hardly useful except when you just run one of those
command for the same distributions.
And even then reprepro is usually good in
not downloading except \fBRelease\fP and \fBRelease.gpg\fP files again.
.TP
.B \-\-nothingiserror
If nothing was done, return with exitcode 1 instead of the usual 0.

Note that "nothing was done" means the primary purpose of the action
in question.
Auxillary actions (opening and closeing the database, exporting missing
files with \-\-export=lookedat, ...) usually do not count.
Also note that this is not very well tested.
If you find an action that claims to have done something in some cases
where you think it should not, please let me know.
.TP
.B \-\-keeptemporaries
Do not delete temporary \fB.new\fP files when exporting a distribution
fails.
(reprepro first create \fB.new\fP files in the \fBdists\fP directory and
only if everything is generated, all files are put into their final place
at once.
If this option is not specified and something fails, all are deleted
to keep \fBdists\fP clean).
.TP
.B \-\-keepunreferencedfiles
Do not delete files that are no longer used because the package they
are from is deleted/replaced with a newer version from the last distribution
it was in.
.TP
.B \-\-keepunusednewfiles
The include, includedsc, includedeb and processincoming by default delete
any file they added to the pool that is not marked used at the end of the
operation.
While this keeps the pool clean and allows changing before trying to add again,
this needs copying and checksum calculation every time one tries to add a file.
.TP
.B \-\-keepdirectories
Do not try to rmdir parent directories after files or directories
have been removed from them.
(Do this if your directories have special permissions you want keep,
do not want to be pestered with warnings about errors to remove them,
or have a buggy rmdir call deleting non-empty directories.)
.TP
.B \-\-keeptemporaries
If an export of an distribution fails,
this option causes reprepro to not delete the temporary \fB.new\fP files
in the \fBdists/\fP directory, so one can look at the partial result.
.TP
.B \-\-ask\-passphrase
Ask for passphrases when signing things and one is needed. This is a quick
and dirty implementation using the obsolete \fBgetpass(3)\fP function
with the description gpgme is supplying. So the prompt will look quite
funny and support for passphrases with more than 8 characters depend on your libc.
I suggest using gpg\-agent or something like that instead.
.TP
.B \-\-noskipold
When updating do not skip targets where no new index files and no files
marked as already processed are available.

If you changed a script to preprocess downloaded index files or
changed a Listfilter, you most likely want to call reprepro with \-\-noskipold.
.TP
.B \-\-waitforlock \fIcount
If there is a lockfile indicating another instance of reprepro is currently
using the database, retry \fIcount\fP times after waiting for 10 seconds
each time.
The default is 0 and means to error out instantly.
.TP
.B \-\-spacecheck full\fR|\fPnone
The default is \fBfull\fR:
.br
In the update commands, check for every to be downloaded file which filesystem
it is on and how much space is left.
.br
To disable this behaviour, use \fBnone\fP.
.TP
.BI \-\-dbsafetymargin " bytes-count"
If checking for free space, reserve \fIbyte-count\fP bytes on the filesystem
containing the \fBdb/\fP directory.
The default is 104857600 (i.e. 100MB), which is quite large.
But as there is no way to know in advance how large the databases will
grow and libdb is extremely touchy in that regard, lower only when you know
what you do.
.TP
.BI \-\-safetymargin " bytes-count"
If checking for free space, reserve \fIbyte-count\fP bytes on filesystems
not containing the \fBdb/\fP directory.
The default is 1048576 (i.e. 1MB).
.TP
.B \-\-noguessgpgtty
Don't set the environment variable
.BR GPG_TTY ,
even when it is not set, stdin is terminal and
.B /proc/self/fd/0
is a readable symbolic link.
.TP
.B \-\-gnupghome
Set the
.B GNUPGHOME
evnironment variable to the given directory as argument to this option.
And your gpg will most likely use the content of this variable
instead of "~/.gnupg".
Take a look at
.BR gpg (1)
to be sure.
This option in the command line is usually not very useful, as it is possible
to set the environment variable directly.
Its main reason for existance is that it can be used in \fIconf\fP\fB/options\fP.
.TP
.B \-\-oldfilesdb
Do not only create checksums.db but also older files.db file.
This will make it possible for reprepro versions before 3.3.0 to
access this repository.
Without this versions before 3.0 will not recognize the database and destroy it.

Note that future versions of reprepro will no longer support the old version.
.TP
.BI \-\-gunzip " gz-uncompressor"
While reprepro links against \fBlibz\fP, it will look for the program given
with this option (or \fBgunzip\fP if not given) and use that when uncompressing
index files while downloading from remote repositories.
(So that downloading and uncompression can happen at the same time).
If the program is not found or is \fBNONE\fP (all-uppercase) then uncompressing
will always be done using the built in uncompression method.
The program has to accept the compressed file as stdin and write
the uncompressed file into stdout.
.TP
.BI \-\-bunzip2 " bz2-uncompressor"
When uncompressing downloaded index files or when not linked against \fBlibbz2\fP
reprepro will use this program to uncompress \fB.bz2\fP files.
The default value is \fBbunzip2\fP.
If the program is not found or is \fBNONE\fP (all-uppercase) then uncompressing
will always be done using the built in uncompression method or not be possible
when not linked against \fBlibbz2\fP.
The program has to accept the compressed file as stdin and write
the uncompressed file into stdout.
.TP
.BI \-\-unlzma " lzma-uncompressor"
When trying to uncompress or read \fPlzma\fP compressed files, this program
will be used.
The default value is \fBunlzma\fP.
If the program is not found or is \fBNONE\fP (all-uppercase) then uncompressing
lzma files will not be possible.
The program has to accept the compressed file as stdin and write
the uncompressed file into stdout.
.SH COMMANDS
.TP
.BR export " [ " \fIcodenames\fP " ]"
Generate all index files for the specified distributions. (For all if none
is specified). This will normally be done automatically and more
fine\-tuned when including or removing packages, so seldom needed; but is nevertheless
a good way to see if
a new
.B distributions
config\-file does the expected things.
.TP
.RB " [ " \-\-delete " ] " createsymlinks " [ " \fIcodenames\fP " ]"
Creates \fIsuite\fP symbolic links in the \fBdists/\fP-directory pointing
to the corresponding \fIcodename\fP.

It will not create links, when multiple of the given codenames
would be linked from the same suite name, or if the link
already exists (though when \fB\-\-delete\fP is given it
will delete already existing symlinks)
.TP
.B list \fIcodename\fP \fR[\fP \fIpackagename\fP \fR]\fP
List all packages (source and binary, except when
.B \-T
or
.B \-A
is given) with the given name in all components (except when
.B \-C
is given) and architectures (except when
.B \-A
is given) of the specified distribution.
If no package name is given, list everything.
.TP
.B listfilter \fIcodename\fP \fIcondition\fP
as list, but does not list a single package, but all packages
matching the given condition.

The format of the formulas is those of the dependency lines in
Debian packages' control files with some extras.
That means a formula consists of names of fields with a possible
condition for its content in parentheses.
These atoms can be combined with
an exclamation mark '!' (meaning not),
a pipe symbol '|' (meaning or) and
a coma ',' (meaning and).
Additionally parentheses can be used to change binding
(otherwise '!' binds more than '|' than ',').

The values given in the search expression are directly alphabetically
compared to the headers in the respective index file.
That means that each part \fIFieldname\fP\fB (\fP\fIcmp\fP\fB \fP\fIvalue\fP\fB)\fP
of the formula will be true for exactly those package that have
in the \fBPackage\fP or \fBSources\fP file a line starting with \fIfieldname\fP
and a value is alphabetically \fIcmp\fP to \fIvalue\fP.

Examples:

.B reprepro \-b . listfilter test2 'Section (== admin)'
will list all packages in distribution test2 with a Section field and the value
of that field being \fBadmin\fP.

.B reprepro \-b . \-T deb listfilter test2 'Source (== \fIblub\fP) | ( !Source , Package (== \fIblub\fP) )'
will find all .deb Packages with either a Source field blub or
no Source field and a Package field blub.
(That means all package generated by a source package \fIblub\fP,
except those also specifying a version number with its Source).
.TP
.B ls \fIpackage-name\fP
List the versions of the the specified package in all distributions.
.TP
.B remove \fIcodename\fP \fIpackage-names\fP
Delete all packages in the specified distribution,
that have package name listed as argument.
(i.e. remove all packages \fBlist\fP with the same arguments and options
would list, except that an empty package list is not allowed.)
.TP
.B removefilter \fIcodename\fP \fIcondition\fP
Delete all packages \fBlistfilter\fP with the same arguments would list.
.TP
.B removesrc \fIcodename\fP \fIsource-name\fP \fR[\fP\fIversion\fP\fR]\fP
Remove all packages in distribution \fIcodename\fP belonging to source
package \fIsource-name\fP.
(Limited to those with source version \fIversion\fP if specified).

If package tracking is activated, it will use that information to find the
packages, otherwise it traverses all package indices for the distribution.
.TP
.BR update " [ " \fIcodenames\fP " ]"
Sync the specified distributions (all if none given) as
specified in the config with their upstreams. See the
description of
.B conf/updates
below.
.TP
.BR checkupdate " [ " \fIcodenames\fP " ]"
Same like
.BR update ,
but will show what it will change instead of actually changing it.
.TP
.BR dumpupdate " [ " \fIcodenames\fP " ]"
Same like
.BR checkupdate ,
but less suiteable for humans and more suitable for computers.
.TP
.BR predelete " [ " \fIcodenames\fP " ]"
This will determine which packages a \fBupdate\fP would delete or
replace and remove those packages.
This can be useful for reducing space needed while upgrading, but
there will be some time where packages are vanished from the
lists so clients will mark them as obsolete.
Plus if you cannot
download a updated package in the (hopefully) following update
run, you will end up with no package at all instead of an old one.
This will also blow up \fB.diff\fP files if you are using the tiffany
example or something similar.
So be careful when using this option or better get some more space so
that update works.
.TP
.B cleanlists
Delete all files in \fIlistdir\fP (default \fIbasedir\fP\fB/lists\fP) that do not
belong to any update rule for any distribution.
I.e. all files are deleted in that directory that no \fbupdate\fP
command in the current configuration can use.
(The files are usually left there, so if they are needed again they
do not need to be downloaded again. Though in many easy cases not
even those files will be needed.)
.TP
.BR pull " [ " \fIcodenames\fP " ]"
pull in newer packages into the specified distributions (all if none given)
from other distributions in the same repository.
See the description of
.B conf/pulls
below.
.TP
.BR checkpull " [ " \fIcodenames\fP " ]"
Same like
.BR pull ,
but will show what it will change instead of actually changing it.
.TP
.BR dumppull " [ " \fIcodenames\fP " ]"
Same like
.BR checkpull ,
but less suiteable for humans and more suitable for computers.
.TP
.B includedeb \fIcodename\fP \fI.deb-filename\fP
Include the given binary Debian package (.deb) in the specified
distribution, applying override information and guessing all
values not given and guessable.
.TP
.B includeudeb \fIcodename\fP \fI.deb-filename\fP
Same like \fBincludedeb\fP, but for .udeb files.
.TP
.B includedsc \fIcodename\fP \fI.dsc-filename\fP
Include the given Debian source package (.dsc, including other files
like .orig.tar.gz, .tar.gz and/or .diff.gz) in the specified
distribution, applying override information and guessing all values
not given and guessable.

Note that .dsc files do not contain section or priority, but the
Sources.gz file needs them.
reprepro tries to parse .diff and .tar files for
it, but is only able to resolve easy cases.
If reprepro fails to extract those automatically,
you have to either specify a DscOverride or give them via
.B \-S
and
.B \-P
.TP
.B include  \fIcodename\fP \fI.changes-filename\fP
Include in the specified distribution all packages found and suitable
in the \fI.changes\fP file, applying override information guessing all
values not given and guessable.
.TP
.B processincoming \fIrulesetname\fP \fR[\fP\fI.changes-file\fP\fR]\fP
Scan an incoming directory and process the .changes files found there.
If a filename is supplied, processing is limited to that file.
.I rulesetname
identifies which rule-set in
.B conf/incoming
determines which incoming directory to use
and in what distributions to allow packages into.
See the section about this file for more information.
.TP
.BR check " [ " \fIcodenames\fP " ]"
Check if all packages in the specified distributions have all files
needed properly registered.
.TP
.BR checkpool " [ " fast " ]"
Check if all files believed to be in the pool are actually still there and
have the known md5sum. When
.B fast
is specified md5sum is not checked.
.TP
.BR collectnewchecksums
Calculate all supported checksums for all files in the pool.
(Versions prior to 3.3 did only store md5sums, 3.3 added sha1).
.TP
.B rereference
Forget which files are needed and recollect this information.
.TP
.B dumpreferences
Print out which files are marked to be needed by whom.
.TP
.B dumpunreferenced
Print a list of all filed believed to be in the pool, that are
not known to be needed.
.TP
.B deleteunreferenced
Remove all known files (and forget them) in the pool not marked to be
needed by anything.
.TP
.BR reoverride " [ " \fIcodenames\fP " ]"
Reapply the override files to the given distributions (Or only parts
thereof given by \fB\-Af\fP,\fB\-C\fP or \fB\-T\fP).

Note: only the control information is changed. Changing a section
to a value, that would cause another component to be guessed, will
not cause any warning.
.TP
.BR dumptracks " [ " \fIcodenames\fP " ]"
Print out all information about tracked source packages in the
given distributions.
.TP
.BR retrack " [ " \fIcodenames\fP " ]"
Recreate a tracking database for the specified distributions.
This contains ouf of three steps.
First all files marked as part of a source package are set to
unused.
Then all files actually used are marked as thus.
Finally tidytracks is called remove everything no longer needed
with the new information about used files.

(This behaviour, though a bit longsome, keeps even files only
kept because of tracking mode \fBkeep\fP and files not otherwise
used but kept due to \fBincludechanges\fP or its relatives.
Before version 3.0.0 such files were lost by running retrack).
.TP
.BR removealltracks " [ " \fIcodenames\fP " ]"
Removes all source package tracking information for the
given distributions.
.TP
.B removetrack " " \fIcodename\fP " " \fIsourcename\fP " " \fIversion\fP
Remove the trackingdata of the given version of a given sourcepackage
from a given distribution. This also removes the references for all
used files.
.TP
.BR tidytracks " [ " \fIcodenames\fP " ]"
Check all source package tracking information for the given distributions
for files no longer to keep.
.TP
.B copy \fIdestination-codename\fP \fIsource-codename\fP \fIpackages...\fP
Copy the given packages from one distribution to another.
The packages are copied verbatim, no override files are consulted.
Only components and architectures present in the source distribution are
copied.
.TP
.B copysrc \fIdestination-codename\fP \fIsource-codename\fP \fIsource-package\fP \fR[\fP\fIversions\fP\fR]\fP
look at each package
(where package means, as usual, every package be it dsc, deb or udeb)
in the distribution specified by \fIsource-codename\fP
and identifies the relevant source package for each.
All packages matching the specified \fIsource-package\fP name
(and any \fIversion\fP if specified)
are copied to the \fIdestination-codename\fP distribution.
The packages are copied verbatim, no override files are consulted.
Only components and architectures present in the source distribution are
copied.
.TP
.B copyfilter \fIdestination-codename\fP \fIsource-codename\fP \fIformula\fP
Copy packages matching the given formula (see \fBlistfilter\fP).
(all versions if no version is specified).
The packages are copied verbatim, no override files are consulted.
Only components and architectures present in the source distribution are
copied.
.TP
.B restore \fIcodename\fP \fIsnapshot\fP \fIpackages...\fP
.TP
.B restoresrc \fIcodename\fP \fIsnapshot\fP \fIsource-epackage\fP \fR[\fP\fIversions\fP\fR]\fP
.TP
.B restorefilter \fIdestination-codename\fP \fIsnapshot\fP \fIformula\fP
Like the copy commands, but do not copy from another distribution,
but from a snapshot generated with \fBgensnapshot\fP.
Note that this blindly trusts the contents of the files in your \fBdists/\fP
directory and does no checking.
.TP
.B clearvanished
Remove all package databases that no longer appear in \fBconf/distributions\fP.
If \fB\-\-delete\fP is specified, it will not stop if there are still
packages left.
Even without \fB\-\-delete\fP it will unreference
files still marked as needed by this target.
(Use \fB\-\-keepunreferenced\fP to not delete them if that was the last
reference.)

Do not forget to remove all exported package indices manually.
.TP
.B gensnapshot " " \fIcodename\fP " " \fIdirectoryname\fP
Generate a snapshot of the distribution specified by \fIcodename\fP
in the directory \fIconf\fB/\fIcodename\fB/snapshots/\fIdirectoryname\fB/\fR
and reference all needed files in the pool as needed by that.
No Content files are generated and no export hooks are run.

Note that there is currently no automated way to remove that snapshot
again (not even clearvanished will unlock the referenced files after the
distribution itself vanished).
You will have to remove the directory yourself and tell reprepro
to \fB_removereferences s=\fP\fIcodename\fP\fB=\fP\fIdirectoryname\fP before
\fBdeleteunreferenced\fP will delete the files from the pool locked by this.

To access such a snapshot with apt, add something like the following to
your sources.list file:
.br
\fBdeb method://as/without/snapshot \fIcodename\fB/snapshots/\fIname\fB main\fR
.TP
.BR rerunnotifiers " [ " \fIcodenames\fP " ]"
Run all external scripts specified in the \fBLog:\fP options of the
specified distributions.
.TP
.B translatefilelists
Translate the file list cache within
.IB db /contents.cache.db
into the new format used since reprepro 3.0.0.

Make sure you have at least half of the space of the current
.IB db /contents.cache.db
file size available in that partition.
.SS internal commands
These are hopefully never needed, but allow manual intervention.
.B WARNING:
Is is quite easy to get into an inconsistent and/or unfixable state.
.TP
.BR _detect " [ " \fIfilekeys\fP " ]"
Look for the files, which \fIfilekey\fP
is given as argument or as a line of the input
(when run without arguments), and calculate
their md5sum and add them to the list of known files.
(Warning: this is a low level operation, no input validation
or normalization is done.)
.TP
.BR _forget " [ " \fIfilekeys\fP " ]"
Like
.B _detect
but remove the given \fIfilekey\fP from the list of known
files.
(Warning: this is a low level operation, no input validation
or normalization is done.)
.TP
.B _listmd5sums
Print a list of all known files and their md5sums.
.TP
.B _listchecksums
Print a list of all known files and their recorded checksums.
.TP
.B _addmd5sums
alias for the newer
.TP
.B _addchecksums
Add information of known files (without any check done)
in the strict format of _listchecksums output (i.e. don't dare to
use a single space anywhere more than needed).
.TP
.BI _dumpcontents " identifier"
Printout all the stored information of the specified
part of the repository. (Or in other words, the content
the corresponding Packages or Sources file would get)
.TP
.BI "_addreference " filekey " " identifier
Manually mark \fIfilekey\fP to be needed by \fIidentifier\fP
.TP
.BI "_removereferences " identifier
Remove all references what is needed by
.I identifier.
.TP
.BI __extractcontrol " .deb-filename"
Look what reprepro believes to be the content of the
.B control
file of the specified .deb-file.
.TP
.BI __extractfilelist " .deb-filename"
Look what reprepro believes to be the list of files
of the specified .deb-file.
.TP
.BI _fakeemptyfilelist " filekey"
Insert an empty filelist for \fIfilekey\fP. This is a evil
hack around broken .deb files that cannot be read by reprepro.
.TP
.B _addpackage \fIcodenam\fP \fIfilename\fP \fIpackages...\fP
Add packages from the specified filename to part specified
by \fB-C\fP \fB-A\fP and \fB-T\fP of the specified distribution.
Very strange things can happen if you use it improperly.
.TP
.B __dumpuncompressors
List what compressions format can be uncompressed and how.
.TP
.BI __uncompress " format compressed-file uncompressed-file"
Use builtin or external uncompression to uncompress the specified
file of the specified format into the specified target.
.SH "CONFIG FILES"
.B reprepo
uses three config files, which are searched in
the directory specified with
.B \-\-confdir
or in the
.B conf/
subdirectory of the \fIbasedir\fP.

If a file
.B options
exists, it is parsed line by line.
Each line can be the long
name of a command line option (without the \-\-)
plus an argument, where possible.
Those are handled as if they were command line options given before
(and thus lower priority than) any other command line option.
(and also lower priority than any environment variable).

To allow command line options to override options file options,
most boolean options also have a corresponding form starting with \fB\-\-no\fP.

(The only exception is when the path to look for config files
changes, the options file will only opened once and of course
before any options within the options file are parsed.)

The file
.B distributions
is always needed and describes what distributions
to manage, while
.B updates
is only needed when syncing with external repositories and
.B pulls
is only needed when syncing with repositories in the same reprepro database.

The last three are in the format control files in Debian are in,
i.e. paragraphs separated by empty lines consisting of
fields. Each field consists of a fieldname, followed
by a colon, possible whitespace and the data. A field
ends with a newline not followed by a space or tab.

Lines starting with # as first character are ignored,
while in other lines the # character and
everything after it till the newline character are ignored.
.SS conf/distributions
.TP
.B Codename
This required field is the unique identifier of a distribution
and used as directory name within
.B dists/
It is also copied into the Release files.

Note that this name is not supposed to change.
You most likely \fBnever ever\fP want a name like \fBtesting\fP
or \fBstable\fP here (those are suite names and supposed to point
to another distribution later).
.TP
.B Suite
This optional field is simply copied into the
Release files. In Debian it contains names like
stable, testing or unstable. To create symlinks
from the Suite to the Codename, use the
\fBcreatesymlinks\fP command of reprepro.
.TP
.B FakeComponentPrefix
If this field is present,
its argument is added before every Component written to the main
Release file,
and removed from the end of the Codename and Suite fields in that file.
.br
So \fB
 Codename: bla/updates
 Suite: foo/updates
 FakeComponentPrefix: updates
 Components: main bad
\fP will create a Release file with \fB
 Codename: bla
 Suite: foo
 Components: updates/main updates/bad
\fP in it, but otherwise nothing is changed.
This makes the distribution look more like Debian's security archive,
thus work around problems with apt's workarounds for that.
.TP
.B AlsoAcceptFor
A list of distribution names.
When a \fB.changes\fP file is told to be included
into this distribution with the \fBinclude\fP command
and the distribution header of that file is neither
the codename, nor the suite name, nor any name from the
list, a \fBwrongdistribution\fP error is generated.
The \fBprocess_incoming\fP command will also use this field,
see the description of \fBAllow\fP and \fBDefault\fP
from the \fBconf/incoming\fP file for more information.
.TP
.B Version
This optional field is simply copied into the
Release files.
.TP
.B Origin
This optional field is simply copied into the
Release files.
.TP
.B Label
This optional field is simply copied into the
Release files.
.TP
.B NotAutomatic
This optional field is simply copied into the
Release files.
(The value is handled as arbitrary string,
though anything but \fByes\fP does make much
sense right now.)
.TP
.B Description
This optional field is simply copied into the
Release files.
.TP
.B Architectures
This required field lists the binary architectures within
this distribution and if it contains
.B source
(i.e. if there is an item
.B source
in this line this Distribution has source. All other items
specify things to be put after "binary\-" to form directory names
and be checked against "Architecture:" fields.)

This will also be copied into the Release files. (With exception
of the
.B source
item, which will not occur in the topmost Release file whether
it is present here or not)
.TP
.B Components
This required field lists the component of a
distribution. See
.B GUESSING
for rules which component packages are included into
by default. This will also be copied into the Release files.
.TP
.B UDebComponents
Components with a debian\-installer subhierarchy containing .udebs.
(E.g. simply "main")
.TP
.B Update
When this field is present, it describes which update rules are used
for this distribution. There also can be a magic rule minus ("\-"),
see below.
.TP
.B Pull
When this field is present, it describes which pull rules are used
for this distribution.
Pull rules are like Update rules,
but get their stuff from other distributions and not from external sources.
See the description for \fBconf/pulls\fP.
.TP
.B SignWith
When this field is present, a Release.gpg file will be generated.
If the value is "yes" or "default", the default key of gpg is used.
Otherwise the value will be given to libgpgme to determine to key to
use.

If there are problems with signing, you can try
.br
.B gpg \-\-list\-secret\-keys \fIvalue\fP
.br
to see how gpg could interprete the value.
If that command does not list any keys or multiple ones,
try to find some other value (like the keyid),
that gpg can more easily associate with a unique key.

If this key has a passphrase, you need to use gpg-agent
or the insecure option \fB\-\-ask\-passphrase\fP.
.TP
.B DebOverride
When this field is present, it describes the override file used
when including .deb files.
.TP
.B UDebOverride
When this field is present, it describes the override file used
when including .udeb files.
.TP
.B DscOverride
When this field is present, it describes the override file used
when including .dsc files.
.TP
.B DebIndices\fR, \fBUDebIndices\fR, \fBDscIndices
Choose what kind of Index files to export. The first
part describes what the Index file shall be called.
The second argument determines the name of a Release
file to generate or not to generate if missing.
Then at least one of "\fB.\fP", "\fB.gz\fP"  or "\fB.bz2\fP"
specifying whether to generate uncompressed output, gzipped
output, bzip2ed output or any combination.
(bzip2 is only available when compiled with bzip2 support,
so it might not be available when you compiled it on your
own).
If an argument not starting with dot follows,
it will be executed after all index files are generated.
(See the examples for what argument this gets).
The default is:
.br
DebIndices: Packages Release . .gz
.br
UDebIndices: Packages . .gz
.br
DscIndices: Sources Release .gz
.TP
.B Contents
Enable the creation of Contents files listing all the files
within the binary packages of a distribution.
(Which is quite slow, you have been warned).

In earlier versions, the first argument was a rate at which
to extract file lists.
As this did not work and was no longer easily possible after
some factorisation, this is no longer supported.

The arguments of this field is a space separated list of options.
If there is a \fBudebs\fP keyword, \fB.udeb\fPs are also listed
(in a file called \fBuContents\-\fP\fIarchitecture\fP.)
If there is a \fBnodebs\fP keyword, \fB.deb\fPs are not listed.
(Only useful together with \fBudebs\fP)
If there is at least one of the keywords \fB.\fP, \fB.gz\fP and/or \fB.bz2\fP,
the Contents files are written uncompressed, gzipped and/or bzip2ed instead
of only gzipped.
.TP
.B ContentsArchitectures
Limit generation of Contents files to the architectures given.
If this field is not there, all architectures are processed.
An empty field means no architectures are processed, thus not
very useful.
.TP
.B ContentsComponents
Limit what components are processed for the \fBContents-\fP\fIarch\fP
files to the components given.
If this field is not there, all components are processed.
An empty field is equivalent to specify \fBnodebs\fP in the
\fBContents\fP field, while a non-empty field overrides a
\fBnodebs\fP there.
.TP
.B ContentsUComponents
Limit what components are processed for the uContents files to
the components given.
If this field is not there and there is the \fBudebs\fP keyword
in the Contents field, all .udebs of all components are put
in the \fBuContents.\fP\fIarch\fP files.
If this field is not there and there is no \fBudebs\fP keyword
in the Contents field, no \fBuContents\fP-\fIarch\fP files are
generated at all.
A non-empty fields implies generation of \fBuContents\fP-\fIarch\fP
files (just like the \fBudebs\fP keyword in the Contents field),
while an empty one causes no \fBuContents-\fP\fIarch\fP files to
be generated.
.TP
.B Uploaders
Specified a file (relative to confdir if not starting with a slash)
to specify who is allowed to upload packages. With this there are no
limits, and this file can be ignored via \fB\-\-ignore=uploaders\fP.
See the section \fBUPLOADERS FILES\fP below.
.TP
.B Tracking
Enable the (experimental) tracking of source packages.
The argument list needs to contain exactly one of the following:
.br
.B keep
Keeps all files of a given source package, until that
is deleted explicitly via \fBremovetrack\fP. This is
currently the only possibility to keep older packages
around when all indices contain newer files.
.br
.B all
Keep all files belonging to a given source package until
the last file of it is no longer used within that
distribution.
.br
.B minimal
Remove files no longer included in the tracked distribution.
(Remove changes, logs and includebyhand files once no file is
in any part of the distribution).
.br
And any number of the following (or none):
.br
.B includechanges
Add the .changes file to the tracked files of a source package.
Thus it is also put into the pool.
.br
.B includebyhand
Add \fBbyhand\fP and \fBraw-\fP\fI*\fP files to the tracked
files and thus in the pool.
.br
.B includelogs
Add log files to the tracked files and thus in the pool.
(Not that putting log files in changes files is a reprepro
extension not found in normal changes files)
.br
.B embargoalls
Not yet implemented.
.br
.B keepsources
Even when using minimal mode, do not remove source files
until no file is needed any more.
.br
.B needsources
Not yet implemented.
.TP
.B Log
Specify a file to log additions and removals of this distribution
into and/or external scripts to call when something is added or
removed.
The rest of the \fBLog:\fP line is the filename,
every following line (as usual, have to begin with a single space)
the name of a script to call.
The name of the script may be preceded with options of the
form \fB\-\-type=\fP(\fBdsc\fP|\fBdeb\fP|\fBudeb\fP),
\fB\-\-architecture=\fP\fIname\fP or
\fB\-\-component=\fP\fIname\fP to only call the script for some
parts of the distribution.
An script with argument \fB\-\-changes\fP is called when a \fB.changes\fP
file was accepted by \fBinclude\fP or \fBprocessincoming\fP (and with other
arguments).
Both type of scripts can have a \fB\-\-via=\fP\fIcommand\fP specified,
in which case it is only called when caused by reprepro command \fIcommand\fP.

For information how it is called and some examples take a look
at manual.html in reprepro's source or
.B /usr/share/doc/reprepro/

If the filename for the log files does not start with a slash,
it is relative to the directory specified with \fB\-\-logdir\fP,
the scripts are relative to \fB\-\-confdir\fP unless starting with
a slash.
.TP
.B ValidFor
If this field exists, an Valid-Until field is put into generated
.B Release
files for this distribution with an date as much in the future as the
argument specifies.

The argument has to be an number followed by one of the units
.BR d ", " m " or " y ,
where \fBd\fP means days, \fBm\fP means 31 days and \fBy\fP means
365 days.
So
.B ValidFor: 1m 11 d
causes the generation of a
.B Valid-Until:
header in Release files that points 42 days into the future.
.TP
.B ReadOnly
Disallow all modifications of this distribution or its directory
in \fBdists/\fP\fIcodename\fP (with the exception of snapshot subdirectories).
.SS conf/updates
.TP
.B Name
The name of this update\-upstream as it can be used in the
.B Update
field in conf/distributions.
.TP
.B Method
An URI as one could also give it apt, e.g.
.I http://ftp.debian.de/debian
which is simply given to the corresponding
.B apt\-get
method. (So either
.B apt\-get has to be installed, or you have to point with
.B \-\-methoddir
to a place where such methods are found.
.TP
.B Fallback
(Still experimental:) A fallback URI, where all files are
tried that failed the first one. They are given to the
same method as the previous URI (e.g. both http://), and
the fallback-server must have everything at the same place.
No recalculation is done, but single files are just retried from
this location.
.TP
.B Config
This can contain any number of lines, each in the format
.B apt\-get \-\-option
would expect. (Multiple lines \(hy as always \(hy marked with
leading spaces).
.P
For example: Config: Acquire::Http::Proxy=http://proxy.yours.org:8080
.TP
.B From
The name of another update rule this rules derives from.
The rule containing the \fBFrom\fP may not contain
.BR Method ", " Fallback " or " Config "."
All other fields are used from the rule referenced in \fBFrom\fP, unless
found in this containing the \fBFrom\fP.
The rule referenced in \fBFrom\fP may itself contain a \fBFrom\fP.
Reprepro will only assume two remote index files are the same,
if both get their \fBMethod\fP information from the same rule.
.TP
.B Suite
The suite to update from. If this is not present, the codename
of the distribution using this one is used. Also "*/whatever"
is replaced by "<codename>/whatever"
.TP
.B Components
The components to update. Each item can be either the name
of a component or a pair of a upstream component and a local
component separated with ">". (e.g. "main>all contrib>all non\-free>notall")

If this field is not there, all components from the distribution
to update are tried.

An empty field means no source or .deb packages are updated by this rule,
but only .udeb packages, if there are any.

A rule might list components not available in all distributions
using this rule. In this case unknown components are silently
ignored.
(Unless you start reprepro with the \fB\-\-fast\fP option,
it will warn about components unusable in all distributions using
that rule. As exceptions, unusable components called \fBnone\fP
are never warned about, for compatibility with versions prior to
3.0.0 where and empty field had a different meaning.)
.TP
.B Architectures
The architectures to update. If omitted all from the distribution
to update from. (As with components, you can use ">" to download
from one architecture and add into another one. (This only determine
in which Package list they land, it neither overwrites the Architecture
line in its description, nor the one in the filename determined from this
one. In other words, it is no really useful without additional filtering))
.TP
.B UDebComponents
Like
.B Components
but for the udebs.
.TP
.B VerifyRelease
Download the
.B Release.gpg
file and check if it is a signature of the
.B Releasefile
with the key given here. (In the Format as
"gpg \-\-with\-colons \-\-list\-key" prints it, i.e. the last
16 hex digits of the fingerprint) Multiple keys can be specified
by separating them with a "|" sign. Then finding a signature
from one of the will suffice.
.TP
.B IgnoreRelease
If this is present, no
.B Release
file will be downloaded and thus the md5sums of the other
index files will not be checked.
.TP
.B Flat
If this field is in an update rule, it is supposed to be a
flat repository, i.e. a repository without a \fBdists\fP
dir and no subdirectories for the index files.
(If the corresponding \fBsources.list\fP line has the suite
end with a slash, then you might need this one.)
The argument for the \fBFlat:\fP field is the Component to
put those packages into.
No \fBComponents\fP or \fBUDebComponents\fP
fields are allowed in a flat update rule.
If the \fBArchitecture\fP field has any \fB>\fP items,
the part left of the "\fB>\fP" is ignored.
.br
For example the \fBsources.list\fP line
 deb http://cran.r-project.org/bin/linux/debian etch-cran/
.br
would translate to
.br
 Name: R
 Method: http://cran.r-project.org/bin/linux/debian
 Suite: etch-cran
 Flat: whatevercomponentyoudlikethepackagesin
.TP
.B IgnoreHashes
This directive tells reprepro to not check the listed
hashes in the downloaded Release file (and only in the Release file).
Possible values are currently \fBsha1\fP and \fBsha256\fP.

Note that \fBmd5\fP is not possible as reprepro internally still
always needs md5 hashes. Note that this does not speed anything
up in any measurable way. The only reason to specify this if
the Release file of the distribution you want to mirror from
uses a faulty algorithm implementation.
Otherwise you will gain nothing and only lose security but not
gain speed.
.TP
.B FilterFormula
This can be a formula to specify which packages to accept from
this source. The format is misusing the parser intended for
Dependency lines. To get only architecture all packages use
"architecture (== all)", to get only at least important
packages use "priority (==required) | priority (==important)".
.TP
.B FilterList
This takes at least two arguments: The first one is the default action
when something is not found in the list, then a list of
filenames (relative to
.B \-\-confdir\fR,
if not starting with a slash),
in the format of dpkg \-\-get\-selections and only packages listed in
there as
.B install
or that are already there and are listed with
.B upgradeonly
will be installed. Things listed as
.B deinstall
or
.B purge
will ignored.
Things listed with
.B warning
are also ignored,
but a warning message is printed to stderr.
A package being
.B hold
will not be upgraded but also not downgraded or removed by previous
delete rules.
To abort the whole upgrade/pull if a package is available, use
.B error\fR.
.TP
.B ListHook
If this is given, it is executed for all downloaded index files
with the downloaded list as first and a filename that will
be used instead of this. (e.g. "ListHook: /bin/cp" works
but does nothing.)

If a file will be read multiple times, it is processed multiple
times, with the environment variables
.BR REPREPRO_FILTER_CODENAME ", " REPREPRO_FILTER_PACKAGETYPE ", "
.BR REPREPRO_FILTER_COMPONENT " and " REPREPRO_FILTER_ARCHITECTURE
set to the where this file will be added and
.B REPREPRO_FILTER_PATTERN
to the name of the update rule causing it.
.TP
.B DownloadListsAs
The arguments of this field, which much be elements of the
form \fB.\fP, \fB.gz\fP, \fB.bz2\fP, \fB.lzma\fP and \fB.diff\fP
specify in which order reprepro
will look for a useable variant of needed index files
in the downloaded Release file.
(The default is \fB.diff .lzma .bz2 .gz .\fP, i.e.
download Packages.diff if listed in the Release file,
otherwise or if not useable download .lzma if
listed in the Release file and there is a way to uncompress it,
then .bz2 if useable, then .gz and then uncompressed).

Together with \fBIgnoreRelease\fP reprepro will download the first
in this list that could be unpacked.

Note there is no way to see if an uncompressed variant
of the file is available (as the Release file always lists their
checksums, even if not there),
so putting '\fB.\fP' anywhere but as the last argument can mean
trying to download a file that does not exist.
.SS conf/pulls
This file contains the rules for pulling packages from one
distribution to another.
While this can also be done with update rules using the file
or copy method and using the exported indices of that other
distribution, this way is faster.
It also ensures the current files are used and no copies
are made.
(This also leads to the limitation that pulling from one
component to another is not possible.)

Each rule consists out of the following fields:
.TP
.B Name
The name of this pull rule as it can be used in the
.B Pull
field in conf/distributions.
.TP
.B From
The codename of the distribution to pull packages from.
.TP
.B Components
The components of the distribution to get from.

If this field is not there,
all components from the distribution to  update are tried.

A rule might list components not available in all distributions using this
rule. In this case unknown components are silently ignored.
(Unless you start reprepro with the \-\-fast option,
it will warn about components unusable in all distributions using that rule.
As exception, unusable components called \fBnone\fP are never warned about,
for compatibility with versions prior to 3.0.0 where and empty field had
a different meaning.)
.TP
.B Architectures
The architectures to update.
If omitted all from the distribution to pull from.
As in
.BR conf/updates ,
you can use ">" to download
from one architecture and add into another one. (And again, only useful
with filtering to avoid packages not architecture \fBall\fP to migrate).
.TP
.B UDebComponents
Like
.B Components
but for the udebs.
.TP
.B FilterFormula
.TP
.B FilterList
The same as with update rules.
.SH "OVERRIDE FILES"
Override files are yet only used when things are manually added,
not when imported while updating from an external source.
The format should resemble the extended ftp\-archive format,
to be specific it is:

.B \fIpackagename\fP \fIfield name\fP \fInew value\fP

For example:
.br
.B kernel\-image\-2.4.31\-yourorga Section protected/base
.br
.B kernel\-image\-2.4.31\-yourorga Priority standard
.br
.B kernel\-image\-2.4.31\-yourorga Maintainer That's me <me@localhost>
.br
.B reprepro Priority required

All fields of a given package will be replaced by the new value specified
in the override file.
While the field name is compared case-insensitive, it is copied in
exactly the form in the override file there.
(Thus I suggest to keep to the exact case it is normally found in
index files in case some other tool confuses them.)
More than copied is the Section header (unless \fB\-S\fP is supplied),
which is also used to guess the component (unless \fB\-C\fP is there).
There is no protection against changing headers like \fBPackage\fP,
\fBFilename\fP, \fBSize\fP or \fBMD5sum\fP, though changing these functional
fields may give the most curious results.
(Most likely reprepro may error out in future invocations).
.SS conf/incoming
Every chunk is a rule set for the
.B process_incoming
command.
Possible fields are:
.TP
.B Name
The name of the rule-set, used as argument to the scan command to specify
to use this rule.
.TP
.B IncomingDir
The Name of the directory to scan for
.B .changes
files.
.TP
.B TempDir
A directory where the files listed in the processed .changes files
are copied into before they are read.
You can avoid some copy operatations by placing this directory
within the same moint point the pool hierachy
is (at least partially) in.
.B LogDir
A directory where .changes files, .log files and otherwise unused .byhand
files are stored upon procession.
.TP
.B Allow \fIarguments
Each argument is either a pair \fIname1\fB>\fIname2\fR or simply
\fIname\fP which is short for \fIname\fB>\fIname\fR.
Each \fIname2\fP must identify a distribution,
either by being Codename, a unique Suite, or a unique AlsoAcceptFor
from \fBconf/distributions\fP.
Each upload has each item in its
.B Distribution:
header compared first to last with each \fIname1\fP in the rules
and is put in the first one accepting this package.  e.g.:
.br
Allow: local unstable>sid
.br
or
.br
Allow: stable>security-updates stable>proposed-updates
.br
(Note that this makes only sense if Multiple is set to true or if
there are people only allowed to upload to proposed-updates but
not to security-updates).
.TP
.B Default \fIdistribution
Every upload not put into any other distribution because
of an Allow argument is put into \fIdistribution\fP if that
accepts it.
.TP
.B Multiple
Allow putting an upload in multiple distributions if it lists more
than one. (Without this field, procession stops after the first
success).
.TP
.B Permit \fIoptions
A list of options to allow things otherwise causing errors:
.br
.B unused_files
.br
Do not stop with error if there are files listed in the \fB.changes\fP
file if it lists files not belonging to any package in it.
.br
.B older_version
.br
Ignore a package not added because there already is a strictly newer
version available instead of treating this as an error.
.TP
.B Cleanup \fIoptions
A list of options to cause more files in the incoming directory to be
deleted:
.br
.B unused_files
.br
If there is \fBunused_files\fP in \fBPermit\fP then also delete those
files when the package is deleted after successful processing.
.br
.B on_deny
.br
If a \fB.changes\fP file is denied processing because of missing signatures
or allowed distributions to be put in, delete it and all the files it references.
.br
.B on_error
.br
If a \fB.changes\fP file causes errors while processing, delete it.
.SH "UPLOADERS FILES"
These files specified by the \fBUploaders\fP header in the distribution
definition as explained above describe what key a \fB.changes\fP file
as to be signed with to be included in that distribution.
.P
Empty lines and lines starting with a hash are ignored, every other line
has to be of one of this three forms:
.br
.B allow * by unsigned
.br
which allows everything without a valid signature in,
.br
.B allow * by any key
.br
which allows everything with any valid signature in or
.br
.B allow *  by key \fIkey-id\fP
.br
which allows everything signed by this \fIkey-id\fP (to be specified
without any spaces) in.
.P
(Other statements
will follow once somebody tells me what restrictions are useful).
.SH "ERROR IGNORING"
With \fB\-\-ignore\fP on the command line or an \fIignore\fP
line in the options file, the following type of errors can be
ignored:
.TP
.B brokenold \fR(hopefully never seen)
If there are errors parsing an installed version of package, do not
error out, but assume it is older than anything else, has not files
or no source name.
.TP
.B brokensignatures
If a .changes or .dsc file contains at least one invalid signature
and no valid signature (not even expired or from an expired or revoked key),
reprepro assumes the file got corrupted and refuses to use it unless this
ignore directive is given.
.TP
.B brokenversioncmp \fR(hopefully never seen)
If comparing old and new version fails, assume the new one is newer.
.TP
.B dscinbinnmu
If a .changes file has an explicit Source version that is different the
to the version header of the file,
than reprepro assumes it is binary non maintainer upload (NMU).
In that case, source files are not permitted in .changes files
processed by
.B include
or
.BR processincoming .
Adding \fB\-\-ignore=dscinbinnmu\fP allows it for the \fBinclude\fP
command.
.TP
.B emptyfilenamepart \fR(insecure)
Allow strings to be empty that are used to construct filenames.
(like versions, architectures, ...)
.TP
.B extension
Allow to \fBincludedeb\fP files that do not end with \fB.deb\fP,
to \fBincludedsc\fP files not ending in \fB.dsc\fP and to
\fBinclude\fP files not ending in \fB.changes\fP.
.TP
.B forbiddenchar \fR(insecure)
Do not insist on Debian policy for package and source names
and versions.
Thus allowing all 7-bit characters but slashes (as they would
break the file storage) and things syntactically active
(spaces, underscores in filenames in .changes files, opening
parentheses in source names of binary packages).
To allow some 8-bit chars additionally, use \fB8bit\fP additionally.
.TP
.B 8bit \fR(more insecure)
Allow 8-bit characters not looking like overlong UTF-8 sequences
in filenames and things used as parts of filenames.
Though it hopefully rejects overlong UTF-8 sequences, there might
be other characters your filesystem confuses with special characters,
thus creating filenames possibly equivalent to
\fB/mirror/pool/main/../../../etc/shadow\fP
(Which should be safe, as you do not run reprepro as root, do you?)
or simply overwriting your conf/distributions file adding some commands
in there. So do not use this if you are paranoid, unless you are paranoid
enough to have checked the code of your libs, kernel and filesystems.
.TP
.B ignore \fR(for forward compatibility)
Ignore unknown ignore types given to \fI\-\-ignore\fP.
.TP
.B flatandnonflat \fR(only supresses a warning)
Do not warn about a flat and a non-flat distribution from the same
source with the same name when updating.
(Hopefully never ever needed.)
.TP
.B malformedchunk \fR(I hope you know what you do)
Do not stop when finding a line not starting with a space but
no colon(:) in it. These are otherwise rejected as they have no
defined meaning.
.TP
.B missingfield \fR(safe to ignore)
Ignore missing fields in a .changes file that are only checked but
not processed.
Those include: Format, Date, Urgency, Maintainer, Description, Changes
.TP
.B missingfile \fR(might be insecure)
When including a .dsc file from a .changes file,
try to get files needed but not listed in the .changes file
(e.g. when someone forgot to specify \-sa to dpkg\-buildpackage)
from the directory the .changes file is in instead of erroring out.
(\fB\-\-delete\fP will not work with those files, though.)
.TP
.B spaceonlyline \fR(I hope you know what you do)
Allow lines containing only (but non-zero) spaces. As these
do not separate chunks as thus will cause reprepro to behave
unexpected, they cause error messages by default.
.TP
.B surprisingarch
Do not reject a .changes file containing files for a
architecture not listed in the Architecture-header within it.
.TP
.B surprisingbinary
Do not reject a .changes file containing .deb files containing
packages whose name is not listed in the "Binary:" header
of that changes file.
.TP
.B undefinedtarget \fR(hope you are not using the wrong db directory)
Do not stop when the packages.db file contains databases for
codename/packagetype/component/architectures combinations that are
not listed in your distributions file.

This allows you to temporarily remove some distribution from the config files,
without having to remove the packages in it with the \fBclearvanished\fP
command.
You might even temporarily remove single architectures or components,
though that might cause inconsistencies in some situations.
.TP
.B undefinedtracking \fR(hope you are not using the wrong db directory)
Do not stop when the tracking file contains databases for
distributions that are not listed in your \fBdistributions\fP file.

This allows you to temporarily remove some distribution from the config files,
without having to remove the packages in it with the \fBclearvanished\fP
command.
You might even temporarily disable tracking in some distribution, but that
is likely to cause inconsistencies in there, if you do not know, what you
are doing.
.TP
.B unknownfield \fR(for forward compatibility)
Ignore unknown fields in the config files, instead of refusing to run
then.
.TP
.B unusedarch \fR(safe to ignore)
No longer reject a .changes file containing no files for any of the
architectures listed in the Architecture-header within it.
.TP
.B unusedoption
Do not complain about command line options not used by the
specified action (like \fB\-\-architecture\fP).
.TP
.B uploaders
The include command will accept packages that would otherwise been
rejected by the uploaders file.
.TP
.B wrongdistribution \fR(safe to ignore)
Do not error out if a .changes file is to be placed in a
distribution not listed in that files' Distributions: header.
.TP
.B wrongsourceversion
Do not reject a .changes file containing .deb files with
a different opinion on what the version of the source package is.
.br
(Note: reprepro only compares literally here, not by meaning.)
.TP
.B wrongversion
Do not reject a .changes file containing .dsc files with
a different version.
.br
(Note: reprepro only compares literally here, not by meaning.)
.SH GUESSING
When including a binary or source package without explicitly
declaring a component with
.B \-C
it will take the
first component with the name of the section, being
prefix to the section, being suffix to the section
or having the section as prefix or any. (In this order)

Thus having specified the components:
"main non\-free contrib non\-US/main non\-US/non\-free non\-US/contrib"
should map e.g.
"non\-US" to "non\-US/main" and "contrib/editors" to "contrib",
while having only "main non\-free and contrib" as components should
map "non\-US/contrib" to "contrib" and "non\-US" to "main".

.B NOTE:
Always specify main as the first component, if you want things
to end up there.

.B NOTE:
unlike in dak, non\-US and non\-us are different things...
.SH NOMENCLATURE
.B Codename
the primary identifier of a given distribution. This are normally
things like \fBsarge\fP, \fBetch\fP or \fBsid\fP.
.TP
.B basename
the name of a file without any directory information.
.TP
.B filekey
the position relative to the mirrordir.  (as found as "Filename:" in Packages.gz)
.TP
.B "full filename"
the position relative to /
.TP
.B architecture
The term like \fBsparc\fP, \fBi386\fP, \fBmips\fP, ... .
To refer to the source packages, \fBsource\fP
is sometimes also treated as architecture.
.TP
.B component
Things like \fBmain\fP, \fBnon\-free\fP and \fBcontrib\fP
(by policy and some other programs also called section, reprepro follows
the naming scheme of apt here.)
.TP
.B section
Things like \fBbase\fP, \fBinterpreters\fP, \fBoldlibs\fP and \fBnon\-free/math\fP
(by policy and some other programs also called subsections).
.TP
.B md5sum
The checksum of a file in the format
"\fI<md5sum of file>\fP \fI<length of file>\fP"
.SH Some note on updates
.SS A version is not overwritten with the same version.
.B reprepro
will never update a package with a version it already has. This would
be equivalent to rebuilding the whole database with every single upgrade.
To force the new same version in, remove it and then update.
(If files of
the packages changed without changing their name, make sure the file is
no longer remembered by reprepro.
Without \fB\-\-keepunreferencedfiled\fP
and without errors while deleting it should already be forgotten, otherwise
a \fBdeleteunreferenced\fP or even some \fB__forget\fP might help.)
.SS The magic delete rule ("\-").
A minus as a single word in the
.B Update:
line of a distribution marks everything to be deleted. The mark causes later rules
to get packages even if they have (strict) lower versions. The mark will
get removed if a later rule sets the package on hold (hold is not yet implemented,
in case you might wonder) or would get a package with the same version
(Which it will not, see above). If the mark is still there at the end of the processing,
the package will get removed.
.P
Thus the line "Update: \-
.I rules
" will cause all packages to be exactly the
highest Version found in
.I rules.
The line "Update:
.I near
\-
.I rules
" will do the same, except if it needs to download packages, it might download
it from
.I near
except when too confused. (It will get too confused e.g. when
.I near
or
.I rules
have multiple versions of the package and the highest in
.I near
is not the first one in
.I rules,
as it never remember more than one possible spring for a package.
.P
Warning: This rule applies to all type/component/architecture triplets
of a distribution, not only those some other update rule applies to.
(That means it will delete everything in those!)
.SH ENVIRONMENT VARIABLES
Environment variables are always overwritten by command line options,
but overwrite options set in the \fBoptions\fP file. (Even when the
options file is obviously parsed after the environment variables as
the environment may determine the place of the options file).
.TP
.B REPREPRO_BASE_DIR
The directory in this variable is used instead of the current directory,
if no \fB\-b\fP or \fB\-\-basedir\fP options are supplied.
.br
It is also set in all hook scripts called by reprepro
(relative to the current directory or absolute,
depending on how reprepro got it).
.TP
.B REPREPRO_CONFIG_DIR
The directory in this variable is used when no \fB\-\-confdir\fP is
supplied.
.br
It is also set in all hook scripts called by reprepro
(relative to the current directory or absolute,
depending on how reprepro got it).
.TP
.B REPREPRO_OUT_DIR
This is not used, but only set in hook scripts called by reprepro
to the directory in which the \fBpool\fP subdirectory resides
(relative to the current directory or absolute,
depending on how reprepro got it).
.TP
.B REPREPRO_DIST_DIR
This is not used, but only set in hook scripts called by reprepro
to the \fBdists\fP directory (relative to the current directory or
absolute, depending on how reprepro got it).
.TP
.B GNUPGHOME
Not used by reprepro directly.
But reprepro uses libgpgme, which calls gpg for signing and verification
of signatures.
And your gpg will most likely use the content of this variable
instead of "~/.gnupg".
Take a look at
.BR gpg (1)
to be sure.
You can also tell reprepro to set this with the \fB--gnupghome\fP option.
.TP
.B GPG_TTY
When there is a gpg-agent running that does not have the passphrase
cached yet, gpg will most likely try to start some pinentry program
to get it.
If that is pinentry-curses, that is likely to fail without this
variable, because it cannot find a terminal to ask on.
In this cases you might set this variable to something like
the value of
.B $(tty)
or
.B $SSH_TTY
or anything else denoting a usable terminal. (You might also
want to make sure you actually have a terminal available.
With ssh you might need the
.B \-t
option to get a terminal even when telling gpg to start a specific command).

By default, reprepro will set this variable to what the symbolic link
.B /proc/self/fd/0
points to, if stdin is a terminal, unless you told with
.B \-\-noguessgpgtty
to not do so.
.SH BUGS
Increased verbosity always shows those things one does not want to know.
(Though this might be inevitable and a corollary to Murphy)

Reprepro uses berkley db, which was a big mistake.
The most annoying problem not yet worked around is database corruption
when the disk runs out of space.
(Luckily if it happens while downloading packages while updating,
only the files database is affected, which is easy (though time consuming)
to rebuild, see \fBrecovery\fP file in the documentation).
Ideally put the database on another partition to avoid that.

While the source part is mostly considered as the architecture
.B source
some parts may still not use this notation.
.SH "WORK-AROUNDS TO COMMON PROBLEMS"
.TP
.B gpgme returned an impossible condition
With the woody version this normally meant that there was no .gnupg
directory in $HOME, but it created one and reprepro succeeds when called
again with the same command.
Since sarge the problem sometimes shows up, too. But it is no longer
reproducible and it does not fix itself, neither. Try running
\fBgpg \-\-verify \fP\fIfile-you-had-problems-with\fP manually as the
user reprepro is running and with the same $HOME. This alone might
fix the problem. It should not print any messages except perhaps
.br
gpg: no valid OpenPGP data found.
.br
gpg: the signature could not be verified.
.br
if it was an unsigned file.
.TP
.B not including .orig.tar.gz when a .changes file's version does not end in \-0 or \-1
If dpkg\-buildpackage is run without the \fB\-sa\fP option to build a version with
a Debian revision not being \-0 or \-1, it does not list the \fB.orig.tar.gz\fP file
in the \fB.changes\fP file.
If you want to \fBinclude\fP such a file with reprepro
when the .orig.tar.gz file does not already exist in the pool, reprepro will report
an error.
This can be worked around by:
.br
call \fBdpkg\-buildpackage\fP with \fB\-sa\fP (recommended)
.br
copy the .orig.tar.gz file to the proper place in the pool before
.br
call reprepro with \-\-ignore=missingfile (discouraged)
.TP
.B leftover files in the pool directory.
reprepro is sometimes a bit too timid of deleting stuff. When things
go wrong and there have been errors it sometimes just leaves everything
where it is.
To see what files reprepro remembers to be in your pool directory but
does not know anything needing them right know, you can use
.br
\fBreprepro dumpunreferenced\fP
.br
To delete them:
.br
\fBreprepro deleteunreferenced\fP
.SH INTERRUPTING
Interrupting reprepro has its problems.
Some things (like speaking with apt methods, database stuff) can cause
problems when interrupted at the wrong time.
Then there are design problems of the code making it hard to distinguish
if the current state is dangerous or non-dangerous to interrupt.
Thus if reprepro receives a signal normally sent to tell a process to
terminate itself softly,
it continues its operation, but does not start any new operations.
(I.e. it will not tell the apt-methods any new file to download, it will
not replace a package in a target, unless it already had started with it,
it will not delete any files gotten dereferenced, and so on).

\fBIt only catches the first signal of each type. The second signal of a
given type will terminate reprepro. You will risk database corruption
and have to remove the lockfile manually.\fP

Also note that even normal interruption leads to code-paths mostly untested
and thus expose a multitude of bugs including those leading to data corruption.
Better think a second more before issuing a command than risking the need
for interruption.
.SH "REPORTING BUGS"
Report bugs or wishlist requests to the Debian BTS
.br
(e.g. by using \fBreportbug reperepro\fP under Debian)
.br
or directly to <brlink@debian.org>.
.SH COPYRIGHT
Copyright \(co 2004,2005,2006,2007 Bernhard R. Link
.br
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
